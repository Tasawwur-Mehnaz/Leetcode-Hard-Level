A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.


Solution:

class Solution {
public:
    int ans=INT_MIN;
    int dfs(TreeNode* root)
    {
        if(!root)
          return 0;
        int l=max(dfs(root->left),0);
        int r=max(dfs(root->right),0);
        int sum=root->val+l+r;
        ans=max(ans,sum);
        return root->val+max(l,r);

    }
    
    int maxPathSum(TreeNode* root) 
    {
       dfs(root);
       return ans;
    }
};
