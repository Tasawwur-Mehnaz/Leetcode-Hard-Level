You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :
let x be the sum of all elements currently in your array.
choose index i, such that 0 <= i < n and set the value of arr at index i to x.
You may repeat this procedure as many times as needed.
Return true if it is possible to construct the target array from arr, otherwise, return false.

Example 1:
Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

Solution:

class Solution {
public:
    bool isPossible(vector<int>& target) {
    priority_queue<long long int> pq;
    int n=target.size();
    long long int sum=0;
    for(auto i: target)
    {
        pq.push(i);    // putting every element in max heap
        sum+=i;     //calculating total sum of target vector
    }
    while(pq.top()!=1)
    {
        long long int l=pq.top();     // max element
        pq.pop();
        long long int m=sum-l;    //remaining sum execpt max element
        if(m==1)                          // Eg: [1,100000] to avoid so many loops
            return true;  
        if(m>=l or m==0)          //Eg: [9,9,9] 
            return false;
        long long int x=l%m;     //new element to replace max element
        if(x<=0)
            return false;
        pq.push(x);
        sum=m+x;          //updating new sum
    }
    return true;
}
};
