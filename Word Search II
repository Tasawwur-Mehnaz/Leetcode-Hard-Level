Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once in a word.

Example 1:

Input: board = [["o","a","a","n"],
                ["e","t","a","e"],
                ["i","h","k","r"],
                ["i","f","l","v"]], 
       words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Solution:

Creating trie and applying dfs on each cell of board.


class Solution {
public:
    struct trienode
    {
        trienode*child[26];
        bool flag=false;
        string s;
        bool containchar(char c)
        {
            return child[c-'a']!=NULL;
        }
        void putchar(char c, trienode*node)
        {
            child[c-'a']=node;
        }
        trienode*getnode(char c)
        {
            return child[c-'a'];
        }
        void setend()
        {
            flag=true;
        }
        bool isend()
        {
            return flag;
        }
    };
    trienode*root=new trienode();
    void insert(string word)
    {
        trienode *node=root;
        for(int i=0;i<word.size();i++)
        {
            if(!node->containchar(word[i]))
            {
                node->putchar(word[i],new trienode());
            }
            node=node->getnode(word[i]);
        }
        node->setend();
        node->s=word;
    }

    void dfs(vector<vector<char>>& board,int i,int j,trienode*node,set<string>&res,vector<vector<bool>>&vis)
    {
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size() || vis[i][j]==true)
        return;

        node=node->getnode(board[i][j]);
        if(vis[i][j] || !node)
          return;

        if(node->isend())
          res.insert(node->s);
        vis[i][j]=true;
        dfs(board,i+1,j,node,res,vis);        
        dfs(board,i-1,j,node,res,vis);
        dfs(board,i,j+1,node,res,vis);
        dfs(board,i,j-1,node,res,vis);
        vis[i][j]=false;  
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        set<string> res;
        vector<vector<bool>> vis(board.size(),vector<bool> (board[0].size(),false));
        for(string &s: words)
        {
            insert(s);
        }
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                dfs(board,i,j,root,res,vis);
            }
        }
        vector<string> ans(res.begin(),res.end());
        return ans;
    }
};
