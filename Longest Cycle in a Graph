You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.
The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.
Return the length of the longest cycle in the graph. If no cycle exists, return -1.
A cycle is a path that starts and ends at the same node.

 

Example 1:


Input: edges = [3,3,4,2,3]
Output: 3
Explanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.
The length of this cycle is 3, so 3 is returned


Solution:

class Solution {
public:
   int ans,c=0;
   void dfs(int node, vector<int>& count, vector<int> adj[], vector<bool>& vis, vector<int>& dfsvis)
   {
        vis[node]=true;
        dfsvis[node]=1;
        for(auto i:adj[node])
        {  
          if(!vis[i])
        {
            c++;
            count[i]=c;
            dfs(i,count,adj,vis,dfsvis);
            
        }
        else if(dfsvis[i]==1)
        {
            c++;
            count[i]=c-count[i];
            ans=max(ans,count[i]);
    
        }
     }
       dfsvis[node]=0;
       return;
   }
    int longestCycle(vector<int>& edges) {
        int n=edges.size();
        ans=-1;
        vector<int> adj[n+1];
        for(int i=0;i<n;i++)
        {
            if(edges[i]!=-1)
               adj[i].push_back(edges[i]);
        }
        vector<bool> vis(n+1,false);
        vector<int> dfsvis(n+1,0);
        vector<int> count(n+1,0);
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                c=0;
                dfs(i,count,adj,vis,dfsvis); 
            }
        }
        return ans;
        
    }
};
