Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".


SOLUTION:

Without dp and stack
Space-O(1) and Time-O(n)

class Solution {
public:
    int longestValidParentheses(string s) {
        int ans=0;
        int open=0,close=0;
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')
                open++;
            else
                close++;
            if(close==open)
                ans=max(ans,2*open);
            if(close>open)
            {
                close=0;
                open=0;
            }
        }
        open=0,close=0;
        for(int i=n-1;i>=0;i--)
        {
            if(s[i]=='(')
                open++;
            else
                close++;
            if(close==open)
                ans=max(ans,2*open);
            if(open>close)
            {
                close=0;
                open=0;
            }
        }
        return ans;
    }
};


Uing stack: 
space and time - O(n)

class Solution {
public:
    int longestValidParentheses(string s) {
        int n=s.length();
        int ans=0;
        stack<int> st;
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')
            {
                st.push(i);
            }
            else
            {
                if(!st.empty() and s[st.top()]=='(')
                {
                    st.pop();
                }
                else
                    st.push(i);
            }
        }
        int high=n;
        while(!st.empty())
        {
            int low=st.top();
            ans=max(ans,high-low-1);
            st.pop();
            high=low;
        }
        return max(ans,high);
    }
};
