You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.
You can return the answer in any order.

Example 1:
Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.

Solution:

class Solution {
public:
 checking all the words present in original hash map using window size word length.
 
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ans;
        unordered_map<string,int> m;
        for(auto s:words)
        {
            m[s]++;
        }
        
        int wcount=words.size();
        int wlen=words[0].length();
        if(s.length()<wcount)
            return ans;
        for(int i=0;i<s.length()-(wcount*wlen)+1;i++)
        {
            unordered_map<string,int> visited;   // to track the seen word as it could be multiple same word which we dnt require
            int j=0;
            for(;j<wcount;j++)
            {
                int nextind=i+j*wlen;
                string nextword=s.substr(nextind,wlen);
                
                if(m.find(nextword)!=m.end())
                {
                     visited[nextword]++;
                     if(visited[nextword]>m[nextword])
                           break; 
                }
                else
                    break;
            }
            if(j==wcount)
                    ans.push_back(i);
        }
        return ans;
    }
};
