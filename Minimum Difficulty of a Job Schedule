You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).
You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. 
The difficulty of a day is the maximum difficulty of a job done on that day.

You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].
Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

Example 1:
Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7

Solution:
2D dp
class Solution {
public:
    int n;
    int process(vector<int> &jd,int d,int i,vector<vector<int>> &dp)
    {
        if(d==1)
            return *max_element(jd.begin()+i,jd.end());
        if(dp[i][d]!=-1)
            return dp[i][d];
        int curr=INT_MIN;
        int ans=INT_MAX;
        for(int j=i;j<=n-d;j++)
        {
            curr=max(curr,jd[j]);
            ans=min(ans,curr+process(jd,d-1,j+1,dp));
        }
        return dp[i][d]=ans;
    }
            
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        n=jobDifficulty.size();
        if(n<d)
            return -1;
        vector<vector<int>> dp(n+1,vector<int>(d+1,-1));
        return process(jobDifficulty,d,0,dp);
    }
};
