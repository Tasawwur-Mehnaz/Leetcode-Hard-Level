The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.

Solution:

class Solution {
public:
    void process(int col,vector<vector<string>>&ans, vector<int> &leftrow, vector<int> &upperdia,vector<int> &lowerdia, vector<string> &board,int n)
    {
        if(col==n)
        {
            ans.emplace_back(board);
            return;
        }
        
        for(int row=0;row<n;row++)
        {
            if(leftrow[row]==0 and upperdia[n-1+col-row]==0 and lowerdia[row+col]==0)
            {
                board[row][col]='Q';
                leftrow[row]=1;
                upperdia[n-1+col-row]=1;
                lowerdia[row+col]=1;
                process(col+1,ans,leftrow,upperdia,lowerdia,board,n);
                board[row][col]='.';
                leftrow[row]=0;
                upperdia[n-1+col-row]=0;
                lowerdia[row+col]=0;
                
            }
        }
        
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;++i)
        {
            board[i]=s;
        }
        vector<int> leftrow(n,0), upperdia(2*n-1,0), lowerdia(2*n-1,0);
        process(0,ans, leftrow, upperdia, lowerdia,board,n);
        return ans;
    }
};
